name: Java CI with Gradle

# master 브랜치에 push, PR 이벤트 발생시 동작.
on:
  push:
    branches: [ "master" ]
#  pull_request:
#    branches: [ "master" ]


jobs:
  deploy: 
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - uses: actions/checkout@v3
    - run: touch ./src/main/resources/application.properties
    - run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.properties
    - run: cat ./src/main/resources/application.properties
    
  # Spring Boot 어플리케이션 Build (1) --exclude-task test(테스트코드 실행 안함)
    - name: Spring Boot Build
      run: ./gradlew clean build --exclude-task test
      
    - name: Docker build
      run: |
        docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PW }}
        docker build -t fxbin7713/spring-chatbot .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/spring-chatbot       

    # Add github ip to AWS (7)
    - name: Add GitHub IP to AWS
      run: |
        aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        
    ## 4) Docker Hub에 Push한 이미지를 리눅스 서버에 받아와서 run
    - name: Deploy
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PASSWORD }}
        port: ${{ secrets.EC2_SSH_PORT }}          
        script: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PW }}
          docker rm $(docker ps -a -q)
          docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/spring-chatbot
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/spring-chatbot
          docker-compose up -d
