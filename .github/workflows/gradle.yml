name: Java CI with Gradle

# master 브랜치에 push, PR 이벤트 발생시 동작.
on:
  push:
    branches: [ "master" ]
#  pull_request:
#    branches: [ "master" ]

permissions:
  contents: read
  
jobs:
  deploy: 
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    ## 1) git ignore에 등록된 application.properties 파일 생성해주기
      - name: make application.properties
        run: |
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.SPRING_SECRET_APPLICATION_PROPERTIES }}" > ./application.yml
        shell: bash

    ## 2) 스프링 프로젝트 jar 파일 빌드
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew clean build --no-daemon
      
    ## 3) Docker Hub에 이미지 push 하기
    - name: Docker build
      run: |
        docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PW }}
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/spring-chatbot . 
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/spring-chatbot
        
    ## 4) Docker Hub에 Push한 이미지를 리눅스 서버에 받아와서 run
    - name: Deploy
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PASSWORD }}
        port: ${{ secrets.EC2_SSH_PORT }}          
        script: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PW }}
          docker rm $(docker ps -a -q)
          docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/spring-chatbot
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/spring-chatbot
          docker-compose up -d      
